//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\C#\Misaka12456 (Misaka Castle)\Rabotora\Rabotora.Core\RabotoraScriptFormat\RabotoraScriptFormat.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Rabotora.Core.RabotoraScriptFormat {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
public partial class RabotoraScriptFormatParser : Parser {
	public const int
		Whitespace=1, LineComment=2, Comment=3, WS=4, LParen=5, RParen=6, LBrace=7, 
		RBrace=8, QttMrk=9, QttMrk2=10, Comma=11, Semicolon=12, QuesMark=13, ClassKeyWord=14, 
		ActionKeyWord=15, PrivateKeyWord=16, PublicKeyWord=17, InternalKeyWord=18, 
		StaticKeyWord=19, Int=20, Float=21, Word=22, PlainWord=23, FuncWord=24;
	public const int
		RULE_plainString = 0, RULE_value = 1, RULE_values = 2, RULE_cmd = 3, RULE_segment = 4, 
		RULE_segmentBody = 5, RULE_typeDef = 6, RULE_typeDefs = 7, RULE_classDef = 8, 
		RULE_funcDef = 9, RULE_classSegment = 10, RULE_funcSegment = 11, RULE_body = 12, 
		RULE_script = 13;
	public static readonly string[] ruleNames = {
		"plainString", "value", "values", "cmd", "segment", "segmentBody", "typeDef", 
		"typeDefs", "classDef", "funcDef", "classSegment", "funcSegment", "body", 
		"script"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'{'", "'}'", "'''", "'\"'", 
		"','", "';'", "'?'", "'class'", "'void'", "'private'", "'public'", "'internal'", 
		"'static'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "LineComment", "Comment", "WS", "LParen", "RParen", 
		"LBrace", "RBrace", "QttMrk", "QttMrk2", "Comma", "Semicolon", "QuesMark", 
		"ClassKeyWord", "ActionKeyWord", "PrivateKeyWord", "PublicKeyWord", "InternalKeyWord", 
		"StaticKeyWord", "Int", "Float", "Word", "PlainWord", "FuncWord"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RabotoraScriptFormat.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RabotoraScriptFormatParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class PlainStringContext : ParserRuleContext {
		public ITerminalNode[] QttMrk() { return GetTokens(RabotoraScriptFormatParser.QttMrk); }
		public ITerminalNode QttMrk(int i) {
			return GetToken(RabotoraScriptFormatParser.QttMrk, i);
		}
		public ITerminalNode PlainWord() { return GetToken(RabotoraScriptFormatParser.PlainWord, 0); }
		public ITerminalNode[] QttMrk2() { return GetTokens(RabotoraScriptFormatParser.QttMrk2); }
		public ITerminalNode QttMrk2(int i) {
			return GetToken(RabotoraScriptFormatParser.QttMrk2, i);
		}
		public PlainStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterPlainString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitPlainString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainStringContext plainString() {
		PlainStringContext _localctx = new PlainStringContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_plainString);
		try {
			State = 34;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case QttMrk:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 28; Match(QttMrk);
				State = 29; Match(PlainWord);
				State = 30; Match(QttMrk);
				}
				}
				break;
			case QttMrk2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 31; Match(QttMrk2);
				State = 32; Match(PlainWord);
				State = 33; Match(QttMrk2);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public PlainStringContext plainString() {
			return GetRuleContext<PlainStringContext>(0);
		}
		public ITerminalNode Word() { return GetToken(RabotoraScriptFormatParser.Word, 0); }
		public ITerminalNode Int() { return GetToken(RabotoraScriptFormatParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(RabotoraScriptFormatParser.Float, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_value);
		try {
			State = 40;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case QttMrk:
			case QttMrk2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; plainString();
				}
				break;
			case Word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; Match(Word);
				}
				break;
			case Int:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; Match(Int);
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; Match(Float);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(RabotoraScriptFormatParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(RabotoraScriptFormatParser.RParen, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(RabotoraScriptFormatParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(RabotoraScriptFormatParser.Comma, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext values() {
		ValuesContext _localctx = new ValuesContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(LParen);
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QttMrk) | (1L << QttMrk2) | (1L << Int) | (1L << Float) | (1L << Word))) != 0)) {
				{
				State = 43; value();
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 44; Match(Comma);
					State = 45; value();
					}
					}
					State = 50;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 53; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		public ITerminalNode FuncWord() { return GetToken(RabotoraScriptFormatParser.FuncWord, 0); }
		public ValuesContext values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(RabotoraScriptFormatParser.Semicolon, 0); }
		public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_cmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(FuncWord);
			State = 56; values();
			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 57; segment();
				}
			}

			State = 60; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(RabotoraScriptFormatParser.LBrace, 0); }
		public SegmentBodyContext segmentBody() {
			return GetRuleContext<SegmentBodyContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(RabotoraScriptFormatParser.RBrace, 0); }
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(LBrace);
			State = 63; segmentBody();
			State = 64; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentBodyContext : ParserRuleContext {
		public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public SegmentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterSegmentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitSegmentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentBodyContext segmentBody() {
		SegmentBodyContext _localctx = new SegmentBodyContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_segmentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FuncWord) {
				{
				{
				State = 66; cmd();
				}
				}
				State = 71;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public ITerminalNode[] Word() { return GetTokens(RabotoraScriptFormatParser.Word); }
		public ITerminalNode Word(int i) {
			return GetToken(RabotoraScriptFormatParser.Word, i);
		}
		public ITerminalNode QuesMark() { return GetToken(RabotoraScriptFormatParser.QuesMark, 0); }
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_typeDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(Word);
			State = 74;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QuesMark) {
				{
				State = 73; Match(QuesMark);
				}
			}

			State = 76; Match(Word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefsContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(RabotoraScriptFormatParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(RabotoraScriptFormatParser.RParen, 0); }
		public TypeDefContext[] typeDef() {
			return GetRuleContexts<TypeDefContext>();
		}
		public TypeDefContext typeDef(int i) {
			return GetRuleContext<TypeDefContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(RabotoraScriptFormatParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(RabotoraScriptFormatParser.Comma, i);
		}
		public TypeDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterTypeDefs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitTypeDefs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefsContext typeDefs() {
		TypeDefsContext _localctx = new TypeDefsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeDefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(LParen);
			State = 87;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Word) {
				{
				State = 79; typeDef();
				State = 84;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 80; Match(Comma);
					State = 81; typeDef();
					}
					}
					State = 86;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 89; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ITerminalNode ClassKeyWord() { return GetToken(RabotoraScriptFormatParser.ClassKeyWord, 0); }
		public ITerminalNode Word() { return GetToken(RabotoraScriptFormatParser.Word, 0); }
		public ITerminalNode StaticKeyWord() { return GetToken(RabotoraScriptFormatParser.StaticKeyWord, 0); }
		public ITerminalNode PublicKeyWord() { return GetToken(RabotoraScriptFormatParser.PublicKeyWord, 0); }
		public ITerminalNode PrivateKeyWord() { return GetToken(RabotoraScriptFormatParser.PrivateKeyWord, 0); }
		public ITerminalNode InternalKeyWord() { return GetToken(RabotoraScriptFormatParser.InternalKeyWord, 0); }
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) {
				{
				State = 91;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==StaticKeyWord) {
				{
				State = 94; Match(StaticKeyWord);
				}
			}

			State = 97; Match(ClassKeyWord);
			State = 98; Match(Word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		public ITerminalNode[] Word() { return GetTokens(RabotoraScriptFormatParser.Word); }
		public ITerminalNode Word(int i) {
			return GetToken(RabotoraScriptFormatParser.Word, i);
		}
		public TypeDefsContext typeDefs() {
			return GetRuleContext<TypeDefsContext>(0);
		}
		public ITerminalNode ActionKeyWord() { return GetToken(RabotoraScriptFormatParser.ActionKeyWord, 0); }
		public ITerminalNode StaticKeyWord() { return GetToken(RabotoraScriptFormatParser.StaticKeyWord, 0); }
		public ITerminalNode PublicKeyWord() { return GetToken(RabotoraScriptFormatParser.PublicKeyWord, 0); }
		public ITerminalNode PrivateKeyWord() { return GetToken(RabotoraScriptFormatParser.PrivateKeyWord, 0); }
		public ITerminalNode InternalKeyWord() { return GetToken(RabotoraScriptFormatParser.InternalKeyWord, 0); }
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterFuncDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitFuncDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_funcDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) {
				{
				State = 100;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==StaticKeyWord) {
				{
				State = 103; Match(StaticKeyWord);
				}
			}

			State = 106;
			_la = _input.La(1);
			if ( !(_la==ActionKeyWord || _la==Word) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 107; Match(Word);
			State = 108; typeDefs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassSegmentContext : ParserRuleContext {
		public ClassDefContext classDef() {
			return GetRuleContext<ClassDefContext>(0);
		}
		public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		public ClassSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterClassSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitClassSegment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassSegmentContext classSegment() {
		ClassSegmentContext _localctx = new ClassSegmentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_classSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; classDef();
			State = 111; segment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncSegmentContext : ParserRuleContext {
		public FuncDefContext funcDef() {
			return GetRuleContext<FuncDefContext>(0);
		}
		public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		public FuncSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterFuncSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitFuncSegment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncSegmentContext funcSegment() {
		FuncSegmentContext _localctx = new FuncSegmentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_funcSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; funcDef();
			State = 114; segment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ClassSegmentContext[] classSegment() {
			return GetRuleContexts<ClassSegmentContext>();
		}
		public ClassSegmentContext classSegment(int i) {
			return GetRuleContext<ClassSegmentContext>(i);
		}
		public FuncSegmentContext[] funcSegment() {
			return GetRuleContexts<FuncSegmentContext>();
		}
		public FuncSegmentContext funcSegment(int i) {
			return GetRuleContext<FuncSegmentContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 116; classSegment();
					}
					break;

				case 2:
					{
					State = 117; funcSegment();
					}
					break;
				}
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ClassKeyWord) | (1L << ActionKeyWord) | (1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord) | (1L << StaticKeyWord) | (1L << Word))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(RabotoraScriptFormatParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; body();
			State = 123; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1A\x80\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2%\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3"+
		"+\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x31\n\x4\f\x4\xE\x4\x34\v\x4\x5\x4"+
		"\x36\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x5\x5=\n\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\a\a\x46\n\a\f\a\xE\aI\v\a\x3\b\x3\b\x5\bM\n\b"+
		"\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\a\tU\n\t\f\t\xE\tX\v\t\x5\tZ\n\t\x3\t\x3"+
		"\t\x3\n\x5\n_\n\n\x3\n\x5\n\x62\n\n\x3\n\x3\n\x3\n\x3\v\x5\vh\n\v\x3\v"+
		"\x5\vk\n\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x6\xEy\n\xE\r\xE\xE\xEz\x3\xF\x3\xF\x3\xF\x3\xF\x2\x2\x2\x10\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x2\x4\x3\x2\x12\x14\x4\x2\x11\x11\x18\x18\x82\x2$\x3\x2\x2"+
		"\x2\x4*\x3\x2\x2\x2\x6,\x3\x2\x2\x2\b\x39\x3\x2\x2\x2\n@\x3\x2\x2\x2\f"+
		"G\x3\x2\x2\x2\xEJ\x3\x2\x2\x2\x10P\x3\x2\x2\x2\x12^\x3\x2\x2\x2\x14g\x3"+
		"\x2\x2\x2\x16p\x3\x2\x2\x2\x18s\x3\x2\x2\x2\x1Ax\x3\x2\x2\x2\x1C|\x3\x2"+
		"\x2\x2\x1E\x1F\a\v\x2\x2\x1F \a\x19\x2\x2 %\a\v\x2\x2!\"\a\f\x2\x2\"#"+
		"\a\x19\x2\x2#%\a\f\x2\x2$\x1E\x3\x2\x2\x2$!\x3\x2\x2\x2%\x3\x3\x2\x2\x2"+
		"&+\x5\x2\x2\x2\'+\a\x18\x2\x2(+\a\x16\x2\x2)+\a\x17\x2\x2*&\x3\x2\x2\x2"+
		"*\'\x3\x2\x2\x2*(\x3\x2\x2\x2*)\x3\x2\x2\x2+\x5\x3\x2\x2\x2,\x35\a\a\x2"+
		"\x2-\x32\x5\x4\x3\x2./\a\r\x2\x2/\x31\x5\x4\x3\x2\x30.\x3\x2\x2\x2\x31"+
		"\x34\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x36\x3\x2"+
		"\x2\x2\x34\x32\x3\x2\x2\x2\x35-\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x37"+
		"\x3\x2\x2\x2\x37\x38\a\b\x2\x2\x38\a\x3\x2\x2\x2\x39:\a\x1A\x2\x2:<\x5"+
		"\x6\x4\x2;=\x5\n\x6\x2<;\x3\x2\x2\x2<=\x3\x2\x2\x2=>\x3\x2\x2\x2>?\a\xE"+
		"\x2\x2?\t\x3\x2\x2\x2@\x41\a\t\x2\x2\x41\x42\x5\f\a\x2\x42\x43\a\n\x2"+
		"\x2\x43\v\x3\x2\x2\x2\x44\x46\x5\b\x5\x2\x45\x44\x3\x2\x2\x2\x46I\x3\x2"+
		"\x2\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2H\r\x3\x2\x2\x2IG\x3\x2\x2\x2JL\a"+
		"\x18\x2\x2KM\a\xF\x2\x2LK\x3\x2\x2\x2LM\x3\x2\x2\x2MN\x3\x2\x2\x2NO\a"+
		"\x18\x2\x2O\xF\x3\x2\x2\x2PY\a\a\x2\x2QV\x5\xE\b\x2RS\a\r\x2\x2SU\x5\xE"+
		"\b\x2TR\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2\x2WZ\x3\x2"+
		"\x2\x2XV\x3\x2\x2\x2YQ\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\a\b"+
		"\x2\x2\\\x11\x3\x2\x2\x2]_\t\x2\x2\x2^]\x3\x2\x2\x2^_\x3\x2\x2\x2_\x61"+
		"\x3\x2\x2\x2`\x62\a\x15\x2\x2\x61`\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62"+
		"\x63\x3\x2\x2\x2\x63\x64\a\x10\x2\x2\x64\x65\a\x18\x2\x2\x65\x13\x3\x2"+
		"\x2\x2\x66h\t\x2\x2\x2g\x66\x3\x2\x2\x2gh\x3\x2\x2\x2hj\x3\x2\x2\x2ik"+
		"\a\x15\x2\x2ji\x3\x2\x2\x2jk\x3\x2\x2\x2kl\x3\x2\x2\x2lm\t\x3\x2\x2mn"+
		"\a\x18\x2\x2no\x5\x10\t\x2o\x15\x3\x2\x2\x2pq\x5\x12\n\x2qr\x5\n\x6\x2"+
		"r\x17\x3\x2\x2\x2st\x5\x14\v\x2tu\x5\n\x6\x2u\x19\x3\x2\x2\x2vy\x5\x16"+
		"\f\x2wy\x5\x18\r\x2xv\x3\x2\x2\x2xw\x3\x2\x2\x2yz\x3\x2\x2\x2zx\x3\x2"+
		"\x2\x2z{\x3\x2\x2\x2{\x1B\x3\x2\x2\x2|}\x5\x1A\xE\x2}~\a\x2\x2\x3~\x1D"+
		"\x3\x2\x2\x2\x11$*\x32\x35<GLVY^\x61gjxz";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rabotora.Core.RabotoraScriptFormat
