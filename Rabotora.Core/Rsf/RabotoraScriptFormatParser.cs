//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\C#\Misaka12456 (Misaka Castle)\Rabotora\Rabotora.Core\Rsf\RabotoraScriptFormat.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
#pragma warning disable 108

namespace Rabotora.Core.Rsf {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
public partial class RabotoraScriptFormatParser : Parser {
	public const int
		Whitespace=1, LineComment=2, Comment=3, WS=4, LParen=5, RParen=6, LBrace=7, 
		RBrace=8, QttMrk=9, QttMrk2=10, Comma=11, Semicolon=12, QuesMark=13, Equals=14, 
		ClassKeyWord=15, ActionKeyWord=16, PrivateKeyWord=17, PublicKeyWord=18, 
		InternalKeyWord=19, StaticKeyWord=20, Int=21, Float=22, Word=23, PlainWord=24, 
		DOT=25;
	public const int
		RULE_funcWord = 0, RULE_plainString = 1, RULE_value = 2, RULE_values = 3, 
		RULE_cmd = 4, RULE_segment = 5, RULE_segmentBody = 6, RULE_typeDef = 7, 
		RULE_typeDefs = 8, RULE_classDef = 9, RULE_funcDef = 10, RULE_classSegment = 11, 
		RULE_funcSegment = 12, RULE_body = 13, RULE_script = 14;
	public static readonly string[] ruleNames = {
		"funcWord", "plainString", "value", "values", "cmd", "segment", "segmentBody", 
		"typeDef", "typeDefs", "classDef", "funcDef", "classSegment", "funcSegment", 
		"body", "script"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'('", "')'", "'{'", "'}'", "'''", "'\"'", 
		"','", "';'", "'?'", "'='", "'class'", "'void'", "'private'", "'public'", 
		"'internal'", "'static'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "LineComment", "Comment", "WS", "LParen", "RParen", 
		"LBrace", "RBrace", "QttMrk", "QttMrk2", "Comma", "Semicolon", "QuesMark", 
		"Equals", "ClassKeyWord", "ActionKeyWord", "PrivateKeyWord", "PublicKeyWord", 
		"InternalKeyWord", "StaticKeyWord", "Int", "Float", "Word", "PlainWord", 
		"DOT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RabotoraScriptFormat.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RabotoraScriptFormatParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FuncWordContext : ParserRuleContext {
		public ITerminalNode[] Word() { return GetTokens(RabotoraScriptFormatParser.Word); }
		public ITerminalNode Word(int i) {
			return GetToken(RabotoraScriptFormatParser.Word, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(RabotoraScriptFormatParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(RabotoraScriptFormatParser.DOT, i);
		}
		public FuncWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcWord; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterFuncWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitFuncWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncWordContext funcWord() {
		FuncWordContext _localctx = new FuncWordContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_funcWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(Word);
			State = 35;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 31; Match(DOT);
				State = 32; Match(Word);
				}
				}
				State = 37;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainStringContext : ParserRuleContext {
		public ITerminalNode[] QttMrk() { return GetTokens(RabotoraScriptFormatParser.QttMrk); }
		public ITerminalNode QttMrk(int i) {
			return GetToken(RabotoraScriptFormatParser.QttMrk, i);
		}
		public ITerminalNode PlainWord() { return GetToken(RabotoraScriptFormatParser.PlainWord, 0); }
		public ITerminalNode[] QttMrk2() { return GetTokens(RabotoraScriptFormatParser.QttMrk2); }
		public ITerminalNode QttMrk2(int i) {
			return GetToken(RabotoraScriptFormatParser.QttMrk2, i);
		}
		public PlainStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterPlainString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitPlainString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainStringContext plainString() {
		PlainStringContext _localctx = new PlainStringContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_plainString);
		try {
			State = 44;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case QttMrk:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 38; Match(QttMrk);
				State = 39; Match(PlainWord);
				State = 40; Match(QttMrk);
				}
				}
				break;
			case QttMrk2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 41; Match(QttMrk2);
				State = 42; Match(PlainWord);
				State = 43; Match(QttMrk2);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public PlainStringContext plainString() {
			return GetRuleContext<PlainStringContext>(0);
		}
		public ITerminalNode Word() { return GetToken(RabotoraScriptFormatParser.Word, 0); }
		public ITerminalNode Int() { return GetToken(RabotoraScriptFormatParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(RabotoraScriptFormatParser.Float, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_value);
		try {
			State = 50;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case QttMrk:
			case QttMrk2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; plainString();
				}
				break;
			case Word:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; Match(Word);
				}
				break;
			case Int:
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; Match(Int);
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 4);
				{
				State = 49; Match(Float);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(RabotoraScriptFormatParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(RabotoraScriptFormatParser.RParen, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(RabotoraScriptFormatParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(RabotoraScriptFormatParser.Comma, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext values() {
		ValuesContext _localctx = new ValuesContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(LParen);
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QttMrk) | (1L << QttMrk2) | (1L << Int) | (1L << Float) | (1L << Word))) != 0)) {
				{
				State = 53; value();
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 54; Match(Comma);
					State = 55; value();
					}
					}
					State = 60;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 63; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		public FuncWordContext funcWord() {
			return GetRuleContext<FuncWordContext>(0);
		}
		public ValuesContext values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(RabotoraScriptFormatParser.Semicolon, 0); }
		public ITerminalNode[] Word() { return GetTokens(RabotoraScriptFormatParser.Word); }
		public ITerminalNode Word(int i) {
			return GetToken(RabotoraScriptFormatParser.Word, i);
		}
		public ITerminalNode Equals() { return GetToken(RabotoraScriptFormatParser.Equals, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PlainStringContext plainString() {
			return GetRuleContext<PlainStringContext>(0);
		}
		public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_cmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 65; funcWord();
				State = 66; values();
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBrace) {
					{
					State = 67; segment();
					}
				}

				State = 70; Match(Semicolon);
				}
				break;

			case 2:
				{
				State = 72; Match(Word);
				State = 73; Match(Equals);
				State = 76;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case Word:
					{
					State = 74; Match(Word);
					}
					break;
				case QttMrk:
				case QttMrk2:
					{
					State = 75; plainString();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 78; Match(Semicolon);
				}
				break;

			case 3:
				{
				State = 79; funcWord();
				State = 80; value();
				State = 81; Match(Semicolon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(RabotoraScriptFormatParser.LBrace, 0); }
		public SegmentBodyContext segmentBody() {
			return GetRuleContext<SegmentBodyContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(RabotoraScriptFormatParser.RBrace, 0); }
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(LBrace);
			State = 86; segmentBody();
			State = 87; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentBodyContext : ParserRuleContext {
		public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public SegmentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterSegmentBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitSegmentBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentBodyContext segmentBody() {
		SegmentBodyContext _localctx = new SegmentBodyContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_segmentBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Word) {
				{
				{
				State = 89; cmd();
				}
				}
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public ITerminalNode[] Word() { return GetTokens(RabotoraScriptFormatParser.Word); }
		public ITerminalNode Word(int i) {
			return GetToken(RabotoraScriptFormatParser.Word, i);
		}
		public ITerminalNode QuesMark() { return GetToken(RabotoraScriptFormatParser.QuesMark, 0); }
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(Word);
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QuesMark) {
				{
				State = 96; Match(QuesMark);
				}
			}

			State = 99; Match(Word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefsContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(RabotoraScriptFormatParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(RabotoraScriptFormatParser.RParen, 0); }
		public TypeDefContext[] typeDef() {
			return GetRuleContexts<TypeDefContext>();
		}
		public TypeDefContext typeDef(int i) {
			return GetRuleContext<TypeDefContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(RabotoraScriptFormatParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(RabotoraScriptFormatParser.Comma, i);
		}
		public TypeDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterTypeDefs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitTypeDefs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefsContext typeDefs() {
		TypeDefsContext _localctx = new TypeDefsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_typeDefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(LParen);
			State = 110;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Word) {
				{
				State = 102; typeDef();
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 103; Match(Comma);
					State = 104; typeDef();
					}
					}
					State = 109;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 112; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public ITerminalNode ClassKeyWord() { return GetToken(RabotoraScriptFormatParser.ClassKeyWord, 0); }
		public ITerminalNode Word() { return GetToken(RabotoraScriptFormatParser.Word, 0); }
		public ITerminalNode StaticKeyWord() { return GetToken(RabotoraScriptFormatParser.StaticKeyWord, 0); }
		public ITerminalNode PublicKeyWord() { return GetToken(RabotoraScriptFormatParser.PublicKeyWord, 0); }
		public ITerminalNode PrivateKeyWord() { return GetToken(RabotoraScriptFormatParser.PrivateKeyWord, 0); }
		public ITerminalNode InternalKeyWord() { return GetToken(RabotoraScriptFormatParser.InternalKeyWord, 0); }
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) {
				{
				State = 114;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==StaticKeyWord) {
				{
				State = 117; Match(StaticKeyWord);
				}
			}

			State = 120; Match(ClassKeyWord);
			State = 121; Match(Word);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		public ITerminalNode[] Word() { return GetTokens(RabotoraScriptFormatParser.Word); }
		public ITerminalNode Word(int i) {
			return GetToken(RabotoraScriptFormatParser.Word, i);
		}
		public TypeDefsContext typeDefs() {
			return GetRuleContext<TypeDefsContext>(0);
		}
		public ITerminalNode ActionKeyWord() { return GetToken(RabotoraScriptFormatParser.ActionKeyWord, 0); }
		public ITerminalNode StaticKeyWord() { return GetToken(RabotoraScriptFormatParser.StaticKeyWord, 0); }
		public ITerminalNode PublicKeyWord() { return GetToken(RabotoraScriptFormatParser.PublicKeyWord, 0); }
		public ITerminalNode PrivateKeyWord() { return GetToken(RabotoraScriptFormatParser.PrivateKeyWord, 0); }
		public ITerminalNode InternalKeyWord() { return GetToken(RabotoraScriptFormatParser.InternalKeyWord, 0); }
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterFuncDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitFuncDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_funcDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) {
				{
				State = 123;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 127;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==StaticKeyWord) {
				{
				State = 126; Match(StaticKeyWord);
				}
			}

			State = 129;
			_la = _input.La(1);
			if ( !(_la==ActionKeyWord || _la==Word) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 130; Match(Word);
			State = 131; typeDefs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassSegmentContext : ParserRuleContext {
		public ClassDefContext classDef() {
			return GetRuleContext<ClassDefContext>(0);
		}
		public ITerminalNode LBrace() { return GetToken(RabotoraScriptFormatParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(RabotoraScriptFormatParser.RBrace, 0); }
		public FuncSegmentContext[] funcSegment() {
			return GetRuleContexts<FuncSegmentContext>();
		}
		public FuncSegmentContext funcSegment(int i) {
			return GetRuleContext<FuncSegmentContext>(i);
		}
		public ClassSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterClassSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitClassSegment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassSegmentContext classSegment() {
		ClassSegmentContext _localctx = new ClassSegmentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_classSegment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; classDef();
			State = 134; Match(LBrace);
			State = 138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ActionKeyWord) | (1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord) | (1L << StaticKeyWord) | (1L << Word))) != 0)) {
				{
				{
				State = 135; funcSegment();
				}
				}
				State = 140;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 141; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncSegmentContext : ParserRuleContext {
		public FuncDefContext funcDef() {
			return GetRuleContext<FuncDefContext>(0);
		}
		public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		public FuncSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterFuncSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitFuncSegment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncSegmentContext funcSegment() {
		FuncSegmentContext _localctx = new FuncSegmentContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_funcSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; funcDef();
			State = 144; segment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ClassSegmentContext[] classSegment() {
			return GetRuleContexts<ClassSegmentContext>();
		}
		public ClassSegmentContext classSegment(int i) {
			return GetRuleContext<ClassSegmentContext>(i);
		}
		public FuncSegmentContext[] funcSegment() {
			return GetRuleContexts<FuncSegmentContext>();
		}
		public FuncSegmentContext funcSegment(int i) {
			return GetRuleContext<FuncSegmentContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 148;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 146; classSegment();
					}
					break;

				case 2:
					{
					State = 147; funcSegment();
					}
					break;
				}
				}
				State = 150;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ClassKeyWord) | (1L << ActionKeyWord) | (1L << PrivateKeyWord) | (1L << PublicKeyWord) | (1L << InternalKeyWord) | (1L << StaticKeyWord) | (1L << Word))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(RabotoraScriptFormatParser.Eof, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRabotoraScriptFormatListener typedListener = listener as IRabotoraScriptFormatListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRabotoraScriptFormatVisitor<TResult> typedVisitor = visitor as IRabotoraScriptFormatVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_script);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; body();
			State = 153; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1B\x9E\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x3\x2\x3\x2\x3\x2\a\x2$\n\x2\f\x2\xE\x2\'\v\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x5\x3/\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x35\n\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\a\x5;\n\x5\f\x5\xE\x5>\v\x5\x5\x5@\n\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x5\x6G\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x5\x6O\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6V\n\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\b\a\b]\n\b\f\b\xE\b`\v\b\x3\t\x3\t\x5\t\x64\n\t\x3\t\x3\t\x3"+
		"\n\x3\n\x3\n\x3\n\a\nl\n\n\f\n\xE\no\v\n\x5\nq\n\n\x3\n\x3\n\x3\v\x5\v"+
		"v\n\v\x3\v\x5\vy\n\v\x3\v\x3\v\x3\v\x3\f\x5\f\x7F\n\f\x3\f\x5\f\x82\n"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\a\r\x8B\n\r\f\r\xE\r\x8E\v\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x6\xF\x97\n\xF\r\xF\xE\xF\x98\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x2\x2\x2\x11\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2\x2\x4\x3"+
		"\x2\x13\x15\x4\x2\x12\x12\x19\x19\xA4\x2 \x3\x2\x2\x2\x4.\x3\x2\x2\x2"+
		"\x6\x34\x3\x2\x2\x2\b\x36\x3\x2\x2\x2\nU\x3\x2\x2\x2\fW\x3\x2\x2\x2\xE"+
		"^\x3\x2\x2\x2\x10\x61\x3\x2\x2\x2\x12g\x3\x2\x2\x2\x14u\x3\x2\x2\x2\x16"+
		"~\x3\x2\x2\x2\x18\x87\x3\x2\x2\x2\x1A\x91\x3\x2\x2\x2\x1C\x96\x3\x2\x2"+
		"\x2\x1E\x9A\x3\x2\x2\x2 %\a\x19\x2\x2!\"\a\x1B\x2\x2\"$\a\x19\x2\x2#!"+
		"\x3\x2\x2\x2$\'\x3\x2\x2\x2%#\x3\x2\x2\x2%&\x3\x2\x2\x2&\x3\x3\x2\x2\x2"+
		"\'%\x3\x2\x2\x2()\a\v\x2\x2)*\a\x1A\x2\x2*/\a\v\x2\x2+,\a\f\x2\x2,-\a"+
		"\x1A\x2\x2-/\a\f\x2\x2.(\x3\x2\x2\x2.+\x3\x2\x2\x2/\x5\x3\x2\x2\x2\x30"+
		"\x35\x5\x4\x3\x2\x31\x35\a\x19\x2\x2\x32\x35\a\x17\x2\x2\x33\x35\a\x18"+
		"\x2\x2\x34\x30\x3\x2\x2\x2\x34\x31\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34"+
		"\x33\x3\x2\x2\x2\x35\a\x3\x2\x2\x2\x36?\a\a\x2\x2\x37<\x5\x6\x4\x2\x38"+
		"\x39\a\r\x2\x2\x39;\x5\x6\x4\x2:\x38\x3\x2\x2\x2;>\x3\x2\x2\x2<:\x3\x2"+
		"\x2\x2<=\x3\x2\x2\x2=@\x3\x2\x2\x2><\x3\x2\x2\x2?\x37\x3\x2\x2\x2?@\x3"+
		"\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x42\a\b\x2\x2\x42\t\x3\x2\x2\x2\x43\x44"+
		"\x5\x2\x2\x2\x44\x46\x5\b\x5\x2\x45G\x5\f\a\x2\x46\x45\x3\x2\x2\x2\x46"+
		"G\x3\x2\x2\x2GH\x3\x2\x2\x2HI\a\xE\x2\x2IV\x3\x2\x2\x2JK\a\x19\x2\x2K"+
		"N\a\x10\x2\x2LO\a\x19\x2\x2MO\x5\x4\x3\x2NL\x3\x2\x2\x2NM\x3\x2\x2\x2"+
		"OP\x3\x2\x2\x2PV\a\xE\x2\x2QR\x5\x2\x2\x2RS\x5\x6\x4\x2ST\a\xE\x2\x2T"+
		"V\x3\x2\x2\x2U\x43\x3\x2\x2\x2UJ\x3\x2\x2\x2UQ\x3\x2\x2\x2V\v\x3\x2\x2"+
		"\x2WX\a\t\x2\x2XY\x5\xE\b\x2YZ\a\n\x2\x2Z\r\x3\x2\x2\x2[]\x5\n\x6\x2\\"+
		"[\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\xF\x3\x2\x2"+
		"\x2`^\x3\x2\x2\x2\x61\x63\a\x19\x2\x2\x62\x64\a\xF\x2\x2\x63\x62\x3\x2"+
		"\x2\x2\x63\x64\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\a\x19\x2\x2\x66"+
		"\x11\x3\x2\x2\x2gp\a\a\x2\x2hm\x5\x10\t\x2ij\a\r\x2\x2jl\x5\x10\t\x2k"+
		"i\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2nq\x3\x2\x2\x2"+
		"om\x3\x2\x2\x2ph\x3\x2\x2\x2pq\x3\x2\x2\x2qr\x3\x2\x2\x2rs\a\b\x2\x2s"+
		"\x13\x3\x2\x2\x2tv\t\x2\x2\x2ut\x3\x2\x2\x2uv\x3\x2\x2\x2vx\x3\x2\x2\x2"+
		"wy\a\x16\x2\x2xw\x3\x2\x2\x2xy\x3\x2\x2\x2yz\x3\x2\x2\x2z{\a\x11\x2\x2"+
		"{|\a\x19\x2\x2|\x15\x3\x2\x2\x2}\x7F\t\x2\x2\x2~}\x3\x2\x2\x2~\x7F\x3"+
		"\x2\x2\x2\x7F\x81\x3\x2\x2\x2\x80\x82\a\x16\x2\x2\x81\x80\x3\x2\x2\x2"+
		"\x81\x82\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\t\x3\x2\x2\x84\x85\a"+
		"\x19\x2\x2\x85\x86\x5\x12\n\x2\x86\x17\x3\x2\x2\x2\x87\x88\x5\x14\v\x2"+
		"\x88\x8C\a\t\x2\x2\x89\x8B\x5\x1A\xE\x2\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3"+
		"\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\x3\x2\x2\x2"+
		"\x8E\x8C\x3\x2\x2\x2\x8F\x90\a\n\x2\x2\x90\x19\x3\x2\x2\x2\x91\x92\x5"+
		"\x16\f\x2\x92\x93\x5\f\a\x2\x93\x1B\x3\x2\x2\x2\x94\x97\x5\x18\r\x2\x95"+
		"\x97\x5\x1A\xE\x2\x96\x94\x3\x2\x2\x2\x96\x95\x3\x2\x2\x2\x97\x98\x3\x2"+
		"\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x1D\x3\x2\x2\x2\x9A"+
		"\x9B\x5\x1C\xF\x2\x9B\x9C\a\x2\x2\x3\x9C\x1F\x3\x2\x2\x2\x15%.\x34<?\x46"+
		"NU^\x63mpux~\x81\x8C\x96\x98";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Rabotora.Core.Rsf
